CREATE PROCEDURE [dbo].[GetDataDownload]
@UserID varchar(10) = NULL,
@Filters varchar(1000) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Drop the temporary table if it exists
    DROP TABLE IF EXISTS #TMP;
    
    -- Variables for constructing the query
    DECLARE @WHERE NVARCHAR(MAX) = '';
    DECLARE @Query NVARCHAR(MAX) = '';
    
    -- Variables to hold dynamic filter clauses
    DECLARE @FilterParam NVARCHAR(MAX) = '';
    DECLARE @FilterString NVARCHAR(MAX) = '';
    
    -- Handling @Filters logic safely
    IF @Filters IS NOT NULL
    BEGIN
        -- Split @Filters based on the special character '|' (this could be adapted to your specific case)
        SET @FilterString = REPLACE(@Filters, '~', ' LIKE @FilterParam');
        
        -- Add multiple conditions if '|' is used to separate clauses
        IF (LEN(@Filters) - LEN(REPLACE(@Filters, '|', ''))) > 0
        BEGIN
            WITH CTE AS (
                SELECT REPLACE(@Filters, '~', ' LIKE @FilterParam') AS Clause
            )
            SELECT @WHERE = 'WHERE (' + REPLACE(Clause, '|', ' @FilterParam OR ') + ' @FilterParam)'
            FROM CTE;
        END
        ELSE
        BEGIN
            -- Single filter case
            SET @WHERE = 'WHERE ' + REPLACE(@Filters, '~', ' LIKE @FilterParam');
        END
    END

    -- Construct the base query
    SET @Query = 'SELECT FunctionName, ControlID, * FROM [dbo].[testtable] ' + @WHERE + ' ORDER BY FunctionName, ControlID';

    -- Execute the query using sp_executesql and passing the dynamic filter as a parameter
    EXEC sp_executesql 
        @Query,
        N'@FilterParam NVARCHAR(MAX)',
        @FilterParam = '%' + @Filters + '%'; -- Safely passing filter parameter
END
