import React, { useState } from 'react';
import { Tabs, Tab } from 'react-bootstrap';
import { FaEdit, FaSave, FaTimes } from 'react-icons/fa'; // Icons for Edit, Save, and Cancel

const HolistApp = () => {
    // Table data state for the modfields tab
    const [tableData, setTableData] = useState([
        { id: 1, KCApp: 'Yes', IOA: 'No', QAGuidance: 'Some guidance text', isEditing: false },
        { id: 2, KCApp: 'No', IOA: 'Yes', QAGuidance: 'Another text', isEditing: false }
    ]);

    // Handle Edit button click
    const handleEdit = (id) => {
        const updatedData = tableData.map(row => row.id === id ? { ...row, isEditing: true } : row);
        setTableData(updatedData);
    };

    // Handle Save button click
    const handleSave = (id) => {
        const updatedData = tableData.map(row => row.id === id ? { ...row, isEditing: false } : row);
        setTableData(updatedData);
    };

    // Handle Cancel button click (revert to original state)
    const handleCancel = (id) => {
        const updatedData = tableData.map(row => row.id === id ? { ...row, isEditing: false } : row);
        setTableData(updatedData);
    };

    // Handle change for Yes/No select dropdowns and free-form text field
    const handleChange = (id, field, value) => {
        const updatedData = tableData.map(row => row.id === id ? { ...row, [field]: value } : row);
        setTableData(updatedData);
    };

    return (
        <Tabs defaultActiveKey="modfields" id="holist-app-tabs">
            {/* Other tabs can go here */}

            <Tab eventKey="modfields" title="Modify Fields">
                <h2>Modify Fields</h2>

                <table>
                    <thead>
                        <tr>
                            <th>Action</th>
                            <th>KCApp</th>
                            <th>IOA</th>
                            <th>QA Guidance</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tableData.map(row => (
                            <tr key={row.id}>
                                <td>
                                    {/* Toggle between Edit and Save/Cancel buttons */}
                                    {row.isEditing ? (
                                        <>
                                            <button className="icon-button" onClick={() => handleSave(row.id)}>
                                                <FaSave />
                                            </button>
                                            <button className="icon-button" onClick={() => handleCancel(row.id)}>
                                                <FaTimes />
                                            </button>
                                        </>
                                    ) : (
                                        <button className="icon-button" onClick={() => handleEdit(row.id)}>
                                            <FaEdit />
                                        </button>
                                    )}
                                </td>

                                {/* KCApp field - Yes/No dropdown in edit mode */}
                                <td>
                                    {row.isEditing ? (
                                        <select value={row.KCApp} onChange={(e) => handleChange(row.id, 'KCApp', e.target.value)}>
                                            <option value="Yes">Yes</option>
                                            <option value="No">No</option>
                                        </select>
                                    ) : (
                                        row.KCApp
                                    )}
                                </td>

                                {/* IOA field - Yes/No dropdown in edit mode */}
                                <td>
                                    {row.isEditing ? (
                                        <select value={row.IOA} onChange={(e) => handleChange(row.id, 'IOA', e.target.value)}>
                                            <option value="Yes">Yes</option>
                                            <option value="No">No</option>
                                        </select>
                                    ) : (
                                        row.IOA
                                    )}
                                </td>

                                {/* QA Guidance field - Free-form text input in edit mode */}
                                <td>
                                    {row.isEditing ? (
                                        <input
                                            type="text"
                                            value={row.QAGuidance}
                                            onChange={(e) => handleChange(row.id, 'QAGuidance', e.target.value)}
                                        />
                                    ) : (
                                        row.QAGuidance
                                    )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </Tab>

            {/* Additional tabs can go here */}
        </Tabs>
    );
};

export default HolistApp;
