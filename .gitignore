import React, { useState, useEffect, useRef } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  Grid,
  TextField,
  Button,
  Tooltip,
  Modal,
  Box,
  IconButton,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import EditIcon from '@mui/icons-material/Edit';
import SaveIcon from '@mui/icons-material/Save';
import InfoIcon from '@mui/icons-material/Info';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import apiClient from '../../api/apiClient';

const CsfDetails = () => {
  const [data, setData] = useState([]);
  const [expandedPanels, setExpandedPanels] = useState({});
  const [selectedSubcategory, setSelectedSubcategory] = useState(null);
  const [openSummaryModal, setOpenSummaryModal] = useState(false);
  const [openEditModal, setOpenEditModal] = useState(false);
  const changeSummaryRef = useRef(''); // Stores the editable Change Summary text
  const newCommentRef = useRef('');
  const [currentEdit, setCurrentEdit] = useState([]);
  const commentsRef = useRef({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await apiClient.get('/GetCSFMappingData');
        
        // Handling duplicate ChangeSummary values (keep the latest entry)
        const uniqueData = response.data.reduce((acc, item) => {
          const existing = acc.find(subcat => subcat.csF_2_0_SubcategoryID === item.csF_2_0_SubcategoryID);
          if (!existing) {
            acc.push(item);
          }
          return acc;
        }, []);

        setData(uniqueData);
      } catch (error) {
        console.error('Error fetching data:', error);
        toast.error('Failed to fetch CSF mapping data.');
      }
    };

    fetchData();
  }, []);

  const handleAccordionChange = (panel) => (event, isExpanded) => {
    setExpandedPanels((prev) => ({
      ...prev,
      [panel]: isExpanded,
    }));
  };

  /*** ðŸ”µ CSF 2.0 CHANGE SUMMARY - OPEN MODAL ***/
  const handleOpenSummaryModal = (subcategory) => {
    setSelectedSubcategory(subcategory);
    changeSummaryRef.current = subcategory.ChangeSummary || ''; // Load existing summary into ref
    setOpenSummaryModal(true);
  };

  /*** ðŸ”µ CSF 2.0 CHANGE SUMMARY - CLOSE MODAL ***/
  const handleCloseSummaryModal = () => {
    setOpenSummaryModal(false);
    setSelectedSubcategory(null);
  };

  /*** ðŸ”µ CSF 2.0 CHANGE SUMMARY - SAVE FUNCTION ***/
  const handleSaveChangeSummary = async () => {
    if (!selectedSubcategory) return;
    const updatedSummary = changeSummaryRef.current.trim();
    if (!updatedSummary) {
      toast.error('Change Summary cannot be empty.');
      return;
    }

    try {
      await apiClient.post('/UpdateCSF20SubcategoryChangeSummary', {
        CSF_2_0_SubcategoryID: selectedSubcategory.csF_2_0_SubcategoryID,
        ChangeSummary: updatedSummary,
        UserID: 'test_user', // Replace with actual UserID from session
      });

      setData((prevData) =>
        prevData.map((subcat) =>
          subcat.csF_2_0_SubcategoryID === selectedSubcategory.csF_2_0_SubcategoryID
            ? { ...subcat, ChangeSummary: updatedSummary }
            : subcat
        )
      );

      toast.success('Change Summary saved successfully.');
      setOpenSummaryModal(false);
    } catch (error) {
      toast.error('Failed to save change summary.');
    }
  };

  /*** ðŸŸ¢ EDIT USER COMMENTS MODAL ***/
  const handleEditClick = (editData) => {
    setCurrentEdit(editData);
    newCommentRef.current = ''; // Reset new comment
    setOpenEditModal(true);
  };

  const handleCloseEditModal = () => {
    setOpenEditModal(false);
    setCurrentEdit([]);
  };

  const handleSaveUserChange = async () => {
    if (!currentEdit.length) return;

    const item = { ...currentEdit[0], newComment: newCommentRef.current.trim() };

    try {
      await apiClient.post('/api/v1/CSFMapping/handle-user-change', {
        Entity: item.entity,
        CSF_1_1_SubcategoryID: item.csF_1_1_SubcategoryID,
        MaturityLevel: item.maturityLevel,
        AttributeNumber: item.attributeNumber,
        AttributeDefinition: item.attributeDefinition,
        New_CSF_2_0_Subcategory: item.csF_2_0_SubcategoryName,
        ChangeDecision: item.changeDecision,
        Comment: item.newComment,
      });

      toast.success('Successfully saved user change.');
      setOpenEditModal(false);
    } catch (error) {
      toast.error('Failed to save changes.');
    }
  };

  return (
    <div>
      <ToastContainer />

      {data.map((subcat) => (
        <Accordion key={subcat.csF_2_0_SubcategoryID} expanded={expandedPanels[subcat.csF_2_0_SubcategoryID] || false} onChange={handleAccordionChange(subcat.csF_2_0_SubcategoryID)}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography style={{ fontWeight: 'bold' }}>{subcat.csF_2_0_SubcategoryName}</Typography>
            <IconButton onClick={() => handleOpenSummaryModal(subcat)}>
              <EditIcon /> Click to Edit Summary
            </IconButton>
          </AccordionSummary>
          <AccordionDetails>
            {/* ðŸ”µ CSF 2.0 CHANGE SUMMARY DISPLAY */}
            {subcat.ChangeSummary && <Typography><strong>C&E Summary:</strong> {subcat.ChangeSummary}</Typography>}
          </AccordionDetails>
        </Accordion>
      ))}

      {/* ðŸ”µ CSF 2.0 CHANGE SUMMARY MODAL */}
      {openSummaryModal && (
        <Modal open={openSummaryModal} onClose={handleCloseSummaryModal}>
          <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: 600, bgcolor: 'background.paper', p: 4, boxShadow: 24 }}>
            <TextField defaultValue={changeSummaryRef.current} onChange={(e) => (changeSummaryRef.current = e.target.value)} variant="outlined" fullWidth multiline rows={4} placeholder="Enter change summary..." />
            <Button onClick={handleSaveChangeSummary} startIcon={<SaveIcon />} sx={{ mt: 2 }}>Save</Button>
          </Box>
        </Modal>
      )}

      {/* ðŸŸ¢ USER CHANGE EDIT MODAL */}
      {openEditModal && (
        <Modal open={openEditModal} onClose={handleCloseEditModal}>
          <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: 800, bgcolor: 'background.paper', p: 4, boxShadow: 24 }}>
            <TextField defaultValue={newCommentRef.current} onChange={(e) => (newCommentRef.current = e.target.value)} variant="outlined" fullWidth multiline rows={3} placeholder="Enter comment..." />
            <Button onClick={handleSaveUserChange} startIcon={<SaveIcon />} sx={{ mt: 2 }}>Save</Button>
          </Box>
        </Modal>
      )}
    </div>
  );
};

export default CsfDetails;
